// <auto-generated />
using System;
using DepositManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DepositManager.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231026204509_changeporttoint")]
    partial class changeporttoint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("DepositManager.Data.Bank", b =>
                {
                    b.Property<Guid>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BankId");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            BankId = new Guid("02fe1f8a-5112-4952-a8d0-4c2de82d3190"),
                            BankName = "FNB"
                        },
                        new
                        {
                            BankId = new Guid("1ef2121d-d4d6-441b-bb46-28ac48167291"),
                            BankName = "ERIE"
                        },
                        new
                        {
                            BankId = new Guid("43c731df-f40e-4344-9519-1cbb4b2bdac6"),
                            BankName = "Unassigned"
                        });
                });

            modelBuilder.Entity("DepositManager.Data.Check", b =>
                {
                    b.Property<Guid>("CheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DepositId")
                        .HasColumnType("TEXT");

                    b.Property<double>("ReferenceNum")
                        .HasColumnType("REAL");

                    b.HasKey("CheckId");

                    b.HasIndex("DepositId");

                    b.ToTable("Check");

                    b.HasData(
                        new
                        {
                            CheckId = new Guid("3ac9e85b-60b6-417d-98c4-ad0fa78d52c3"),
                            Amount = 15.25m,
                            CustomerName = "Free To Choose",
                            ReferenceNum = 1562.0
                        },
                        new
                        {
                            CheckId = new Guid("dbd6e966-977f-440f-bb77-57ebfef547f2"),
                            Amount = 2560.3m,
                            CustomerName = "Humes",
                            ReferenceNum = 125.0
                        });
                });

            modelBuilder.Entity("DepositManager.Data.Deposit", b =>
                {
                    b.Property<Guid>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BankId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Cash")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DepositStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepositId");

                    b.HasIndex("BankId");

                    b.ToTable("Deposit");
                });

            modelBuilder.Entity("DepositManager.Data.EmailSettings", b =>
                {
                    b.Property<Guid>("EmailSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmailSettingsId");

                    b.ToTable("EmailSettings");

                    b.HasData(
                        new
                        {
                            EmailSettingsId = new Guid("f01c869b-9079-416f-9361-830ef1c32f80"),
                            Hostname = "mail.example.com",
                            Password = "password",
                            Port = 587,
                            Recipient = "guy@example.com",
                            Username = "user@example.com"
                        });
                });

            modelBuilder.Entity("DepositManager.Data.Check", b =>
                {
                    b.HasOne("DepositManager.Data.Deposit", "Deposit")
                        .WithMany()
                        .HasForeignKey("DepositId");

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("DepositManager.Data.Deposit", b =>
                {
                    b.HasOne("DepositManager.Data.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });
#pragma warning restore 612, 618
        }
    }
}
