@using DepositManager.Data
@using Microsoft.EntityFrameworkCore

@inject DepositServices depositService
@inject CheckServices checkService
@inject BankServices bankService
@inject NavigationManager NavigationManager

<div class="content-wrapper">
    <div class="row">
        <SfAutoComplete TValue="Bank" TItem="Bank" Placeholder="Bank name" FloatLabelType="FloatLabelType.Auto"
                        DataSource="banks" @bind-Value="newDeposit.Bank" Autofill="true">
            <AutoCompleteFieldSettings Value="BankName" />
        </SfAutoComplete>
    </div>
    <div class="row">
        <SfNumericTextBox TValue="decimal?" @bind-Value="newDeposit.Cash" Placeholder="Cash" ShowSpinButton="false"></SfNumericTextBox>
    </div>
    <div class="row">
        <SfDatePicker @bind-Value="newDeposit.Date"></SfDatePicker>
    </div>
    <div class="row">
        <SfButton @onclick="SaveNewDeposit" IsPrimary="true">Save</SfButton>
    </div>
</div>

@code {
    private Deposit newDeposit { get; set; } = new Deposit();
    public IEnumerable<Bank> banks { get; set; }

    [CascadingParameter]
    protected IEnumerable<Check> selectedChecks { get; set; }

    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    protected override async Task OnInitializedAsync()
    {
        banks = await bankService.GetBanksAsync();
        newDeposit.Date = DateOnly.FromDateTime(DateTime.Now);
        newDeposit.DepositStatus = false;
        await base.OnInitializedAsync();
    }

    private async Task SaveNewDeposit()
    {
        await depositService.AddDepositAsync(newDeposit);
        foreach (var check in selectedChecks)
        {
            check.Deposit = newDeposit;
            checkService.UpdateCheckAsync(check);
        }
        depositService.CalculateDepositTotalAsync(newDeposit);
        await OnClick.InvokeAsync("CloseDialog");
        NavigationManager.NavigateTo("/deposit/" + newDeposit.DepositId.ToString());
    }
}
