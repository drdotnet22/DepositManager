@page "/pastchecks"

@inherits LayoutComponentBase

@using DepositManager.Data
@using Microsoft.EntityFrameworkCore

@inject CheckServices checkService
@inject DepositServices depositService
@inject NavigationManager NavigationManager

<h3>DepositedChecks</h3>

<SfGrid @ref="Grid" DataSource="@checks" AllowSorting="true" AllowFiltering="true" RowHeight="25" AllowPaging="true">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridEvents TValue="Check" CommandClicked="CommandClickedHandler"></GridEvents>
    <GridPageSettings PageCount="5" PageSize="23" ></GridPageSettings>
    <GridSortSettings>
        <GridSortColumns>
            <GridSortColumn Field="DepositId" Direction="SortDirection.Descending"></GridSortColumn>
        </GridSortColumns>
    </GridSortSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Field="@nameof(Check.CustomerName)" HeaderText="Customer"></GridColumn>
        <GridColumn Field="@nameof(Check.ReferenceNum)" HeaderText="Reference Number"></GridColumn>
        <GridColumn Field="@nameof(Check.Amount)" Format="C2" HeaderText="Check Amount"></GridColumn>
        <GridForeignColumn HeaderText="Deposit Date" Field="@nameof(Check.DepositId)" ForeignKeyValue="Date" ForeignDataSource="deposits"></GridForeignColumn>
        @* <GridForeignColumn TValue="Deposit" HeaderText="Bank" Field="@nameof(Check.DepositId)" ForeignKeyField="BankId" ForeignKeyValue="BankName" ForeignDataSource="deposits" ></GridForeignColumn> *@
        <GridColumn HeaderText="Deposit" Width="100">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.None" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-open-link", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    public SfGrid<Check> Grid { get; set; }
    public IEnumerable<Check> checkList { get; set; }
    public IEnumerable<Check> checks { get; set; }
    public IEnumerable<Deposit> deposits { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshChecks();
        deposits = await depositService.GetDepositsAsync();
        await base.OnInitializedAsync();
    }

    private async Task RefreshChecks()
    {
        checkList = await checkService.GetChecksAsync();
        checks = checkList.Where(c => c.Deposit != null);
    }

    public async void CommandClickedHandler(CommandClickEventArgs<Check> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.None)
        {
            string depositId = args.RowData.DepositId.ToString();
            NavigationManager.NavigateTo("/deposit/" + depositId);
        }
    }
}
