@page "/deposit/{depositId}"

@inherits LayoutComponentBase

@using DepositManager.Data
@using Microsoft.EntityFrameworkCore

@inject DepositServices depositService
@inject CheckServices checkService
@inject BankServices bankService
@inject SfDialogService DialogService
@inject NavigationManager NavigationManager


<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
                <SfDatePicker @bind-Value="deposit.Date" Placeholder="Date" FloatLabelType="FloatLabelType.Always" Readonly="deposit.DepositStatus"></SfDatePicker>
            </div>
            <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
                <SfAutoComplete TValue="Bank" TItem="Bank" Placeholder="Bank name" FloatLabelType="FloatLabelType.Auto"
                                DataSource="banks" @bind-Value="deposit.Bank" Readonly="deposit.DepositStatus" ShowPopupButton="!deposit.DepositStatus">
                    <AutoCompleteFieldSettings Value="BankName" />
                </SfAutoComplete>
            </div>
            <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
                <SfNumericTextBox TValue="decimal?" @bind-Value="deposit.Cash" Placeholder="Cash" FloatLabelType="FloatLabelType.Always" ShowSpinButton="false" Readonly="deposit.DepositStatus"></SfNumericTextBox>
            </div>
            <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
                <SfNumericTextBox TValue="decimal" @bind-Value="depositTotal" Placeholder="Deposit Total" FloatLabelType="FloatLabelType.Always" Readonly="true" ShowSpinButton="false"></SfNumericTextBox>
            </div>
        </div>
        <div class="row">
            <div>
                <SfGrid DataSource="checksInDeposit" AllowSorting="true" RowHeight="25">
                    <GridEvents TValue="Check" CommandClicked="CommandClickedHandler"></GridEvents>
                    <GridSortSettings>
                        <GridSortColumns>
                            <GridSortColumn Field="Amount" Direction="SortDirection.Ascending"></GridSortColumn>
                        </GridSortColumns>
                    </GridSortSettings>
                    <GridColumns>
                        <GridColumn Field="@nameof(Check.CustomerName)" HeaderText="Customer Name"></GridColumn>
                        <GridColumn Field="@nameof(Check.ReferenceNum)" HeaderText="Reference Number" Format="###"></GridColumn>
                        <GridColumn Field="@nameof(Check.Amount)" HeaderText="Amount" Format="C2"></GridColumn>
                        @if (deposit.DepositStatus != true)
                        {
                            <GridColumn>
                                <GridCommandColumns>
                                    <GridCommandColumn Type="CommandButtonType.None" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-link-remove", CssClass="e-flat" })"></GridCommandColumn>
                                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                        }
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
        <div class="row">
            <div>
                @if (!deposit.DepositStatus)
                {
                    <SfButton @onclick="SaveDepositChangesAsync" IsPrimary="true">Save Changes</SfButton>
                    <SfButton @onclick="DeleteDeposit" CssClass="e-danger">Delete Deposit</SfButton>
                }
                <SfButton @onclick="OpenDepositTicketDialog">Open Deposit Ticket</SfButton>
            </div>
        </div>
    </div>
</div>

<SfDialog ShowCloseIcon="true" @bind-Visible="depositTicketDialogVisible" IsModal="true" Width="1400px" AllowPrerender="false"
        AllowDragging="true" EnableResize="true" ResizeHandles="@dialogResizeDirections" >
    <DialogTemplates>
        <Header>Deposit Ticket</Header>
        <Content>
            <CascadingValue Value="deposit">
                <DepositTicket/>
            </CascadingValue>
        </Content>
    </DialogTemplates>
</SfDialog>

<style>
    .content-wrapper {
        width: 95%;
        margin: 0 auto;
        min-width: 85px;
    }

    b.example-label {
        font-size: 14px;
    }

    .content-wrapper div.row {
        padding: 15px 0px;
    }

    .small-textbox {
        padding-top: 5px;
    }

    .tailwind .small-textbox,
    .tailwind-dark .small-textbox {
        padding-top: 3px;
    }

    .e-bigger .small-textbox {
        padding-top: 10px;
    }

    .tailwind .e-bigger .small-textbox,
    .tailwind-dark .e-bigger .small-textbox {
        padding-top: 1px;
    }

    @@media only screen and (max-width: 480px) {
        .content-wrapper {
            width: 92%;
        }

        .col-xs-6,
        .col-xs-4,
        .col-xs-12 {
            padding: 10px 5px;
            width: 100%;
        }

        .content-wrapper div.row {
            padding: 0px;
        }
    }

    .fabric .row.material,
    .bootstrap .row.material,
    .bootstrap4 .row.material,
    .bootstrap5 .row.material,
    .highcontrast .row.material,
    .tailwind .row.material,
    .fluent .row.material,
    .fabric-dark .row.material,
    .bootstrap-dark .row.material,
    .bootstrap5-dark .row.material,
    .tailwind-dark .row.material,
    .fluent-dark .row.material {
        display: none;
    }
</style>

@code {
    [Parameter]
    public string? depositId { get; set; }

    public Deposit deposit;
    public IEnumerable<Check> checksInDeposit;
    public IEnumerable<Bank> banks;
    public decimal depositTotal;
    private ResizeDirection[] dialogResizeDirections { get; set; } = new ResizeDirection[] { ResizeDirection.All };


    protected override async Task OnInitializedAsync()
    {
        deposit = await depositService.GetDepositByIdAsync(depositId);
        banks = await bankService.GetBanksAsync();
        await RefreshChecks();
        await base.OnInitializedAsync();
    }

    private async Task RefreshChecks()
    {
        checksInDeposit = await checkService.GetChecksInDepositAsync(deposit);
        depositTotal = await depositService.GetDepositTotalAsync(deposit);
    }

    public async void CommandClickedHandler(CommandClickEventArgs<Check> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.Delete)
        {
            bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete this check?", "Delete Check");
            if (isConfirm)
            {
                checkService.DeleteCheckAsync(args.RowData);
                RefreshChecks();
            }
        }
        else if (args.CommandColumn.Type == CommandButtonType.None)
        {
            args.RowData.Deposit = null;
            checkService.UpdateCheckAsync(args.RowData);
            RefreshChecks();
        }
    }

    private async Task SaveDepositChangesAsync()
    {
        depositService.UpdateDepositAsync(deposit);
    }

    private async Task DeleteDeposit()
    {
        bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete this deposit? All checks assigned to it will be unlinked and will be available for other deposits.", "Delete Delete");
        if (isConfirm)
        {
            depositService.DeleteDepositAsync(deposit);
            NavigationManager.NavigateTo("/deposits");
        }
    }

    #region Dialog
    public bool depositTicketDialogVisible = false;
    public async Task OpenDepositTicketDialog()
    {
        deposit.DepositStatus = true;
        await depositService.UpdateDepositAsync(deposit);
        this.depositTicketDialogVisible = true;
    }
    #endregion
}
